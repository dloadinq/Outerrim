@page "/aircraft-crews/edit/{aircraftId:int}/{mercenaryId:int}"
@using Database.Entities
@using Repository.Interfaces
@inject IRepository<AircraftCrews> AircraftCrewRepository
@inject IRepository<Aircraft> AircraftRepository
@inject IRepository<Mercenary> MercenaryRepository
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Edit Aircraft Crew</PageTitle>

<h3>Edit Aircraft Crew</h3>

@if (_aircraftCrew is null)
{
    <div class="alert alert-danger">Aircraft Crew not found.</div>
}
else
{
    <EditForm Model="NewAircraftCrew" OnValidSubmit="SaveAircraftCrew">
        <DataAnnotationsValidator />
        <ValidationSummary class="alert alert-danger" />
        <div class="mb-3">
            <label class="form-label">Aircraft</label>
            <InputSelect @bind-Value="NewAircraftCrew.AircraftId" class="form-select">
                @foreach (var aircraft in _aircrafts!)
                {
                    <option value="@aircraft.AircraftId">@aircraft.Name</option>
                }
            </InputSelect>
        </div>
        
        <div class="mb-3">
            <label class="form-label">Mercenary</label>
            <InputSelect @bind-Value="NewAircraftCrew.MercenaryId" class="form-select">
                @foreach (var mercenary in _mercenaries!)
                {
                    <option value="@mercenary.MercenaryId">@mercenary.Firstname @mercenary.Lastname</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label class="form-label">Joined at</label>
            <InputDate TValue="DateTime" @bind-Value="NewAircraftCrew.JoinedAt"></InputDate>
        </div>
        
        <button class="btn btn-primary" type="submit">Update</button>
    </EditForm>
}

@code {
    [Parameter] public int AircraftId { get; set; }
    [Parameter] public int MercenaryId { get; set; }

    private AircraftCrews? _aircraftCrew;
    private List<Aircraft>? _aircrafts;
    private List<Mercenary>? _mercenaries;

    private AircraftCrews NewAircraftCrew = new AircraftCrews();

    protected override async Task OnInitializedAsync()
    {
        _aircrafts = await AircraftRepository.ReadAllAsync();
        _mercenaries = await MercenaryRepository.ReadAllAsync();
        _aircraftCrew = (await AircraftCrewRepository.ReadAllAsync()).FirstOrDefault(c => c.AircraftId == AircraftId && c.MercenaryId == MercenaryId);

        if (_aircraftCrew is not null)
        {
            NewAircraftCrew.AircraftId = _aircraftCrew.AircraftId;
            NewAircraftCrew.MercenaryId = _aircraftCrew.MercenaryId;
            NewAircraftCrew.JoinedAt = _aircraftCrew.JoinedAt;;
        }
    }

    private async Task SaveAircraftCrew()
    {
        if (_aircraftCrew != null)
        {
            _aircraftCrew.AircraftId = NewAircraftCrew.AircraftId;
            _aircraftCrew.MercenaryId = NewAircraftCrew.MercenaryId;
            _aircraftCrew.JoinedAt = NewAircraftCrew.JoinedAt;
            await AircraftCrewRepository.UpdateAsync(_aircraftCrew);
        }
        Navigation.NavigateTo("/aircraft-crews");
    }

    private void CancelEdit()
    {
        Navigation.NavigateTo("/aircraft-crews");
    }
}
